<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      http-equiv="Content-Security-Policy"
      content="script-src 'nonce-<%= nonce %>';"
    />
    <style>
      * {
        font-family: Arial, sans-serif;
        box-sizing: border-box;
        padding: 0;
        margin: 0;
      }

      body {
        width: 100%;
        height: 100vh;
      }

      #graph {
        width: 100%;
        height: 100%;
      }

      #informations {
        display: none;
        background-color: var(--vscode-editor-background);
        box-shadow: 0 -4px 8px 0 rgba(0, 0, 0, 0.2);

        position: fixed;
        bottom: 0;
        left: 0;
        height: 22rem;
        width: 100%;
        flex-direction: column;
        overflow-y: auto;
      }

      #informations header {
        display: flex;
        padding: 0.8rem;
      }

      #informations header h2 {
        flex: 1 1;
        display: flex;
        align-items: center;
      }

      #informations header p {
        cursor: pointer;
        display: flex;
        align-items: center;
        font-weight: bold;
      }

      #informations_content {
        display: flex;
        flex-direction: column;
        align-items: space-evenly;
        padding: 0.8rem;
        gap: 0.8rem;
        overflow-y: auto;
      }

      #informations_content textarea {
        width: 100%;
        overflow: auto;
        resize: none;
        height: 4rem;
        padding: 0.5rem;
      }
    </style>
    <script nonce="<%= nonce %>">
      const vscode = acquireVsCodeApi();
    </script>
    <script
      nonce="<%= nonce %>"
      src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"
    ></script>
  </head>

  <body>
    <p id="loading">Loading...</p>

    <div id="graph"></div>

    <!-- Informations modal -->
    <section id="informations">
      <header>
        <h2 id="informations_id">{nodeId}</h2>
        <p id="informations_close">&#10006;</p>
      </header>

      <div id="informations_content">
        <div>
          <h4>Extents:</h4>
          <textarea id="extent" readonly></textarea>
        </div>
        <div>
          <h4>Intents:</h4>
          <textarea id="intent" readonly></textarea>
        </div>
        <div>
          <h4>Types:</h4>
          <textarea id="types" readonly></textarea>
        </div>
      </div>
    </section>
  </body>

  <script nonce="<%= nonce %>">
    const closeBtn = document.querySelector("#informations_close");
    const informations = document.querySelector("#informations");

    closeBtn.addEventListener("click", function () {
      informations.style.display = "none";
    });

    const data = <%- JSON.stringify(jsonToRender) %>;

    const nodes = new vis.DataSet(data.nodes);
    const edges = new vis.DataSet(data.edges);

    const options = {
        edges: {
          width: 0.15,
          color: { color: "white" }
        },
        nodes: {
          shape: "box",
          margin: 10,
        },
        physics: false,
        layout: {
          hierarchical: {
              enabled: true,
              levelSeparation: 1500, // Distance between nodes
              nodeSpacing: 100,
              treeSpacing: 200,
              blockShifting: true,
              edgeMinimization: true,
              parentCentralization: true,
              direction: "LR", // Left-right
              sortMethod: "directed"
          }
        },
      };

    const network = new vis.Network(document.querySelector("#graph"), { nodes, edges }, options);

    network.on("afterDrawing", function (ctx) {
        document.querySelector("#loading").style.display = "none";
    });

    network.on("click", function (params) {
      // node click
      if (params.nodes.length > 0) {
        const nodeId = params.nodes[0];
        const node = nodes.get(nodeId);

        if (node.childrensId && node.childrensId.length > 0) {
            toggleChildrens(node);
        }

        const infos = node.lattice;

        if(!infos) return;

        informations.style.display = "flex";

        document.querySelector("#informations_id").textContent = `Node ${infos.name}`;
        document.querySelector("#extent").value = infos.extent.join(", ");
        document.querySelector("#intent").value = infos.intent.join(", ");;
        document.querySelector("#types").value = infos.types.reduce((acc, obj) => {
          let sufix = acc ? acc + "\n\n" : acc;
          return sufix + Object.entries(obj).map((curr) => curr.join(": ")).join("\n")
        }, "");
      }

      // edge click
      if (params.edges.length > 0) {
        const edgeId = params.edges[0];
        const edge = edges.get(edgeId);

        // To implement
      }
    });

    function toggleChildrens(node) {
      const otherUpdates = [];

      const childrens = nodes.get({
          filter: function (item) {
              return node.childrensId.includes(item.id);
          }
      });

      const hidden = !node.areChildsHiden;

      // recursivity to go throught the child to hide them when we hide the parent
      if(hidden) {
        const childrensId = [childrens.map((child) => child.id)];
        while(childrensId.length > 0) {
          const currChildrensId = childrensId.shift()
          const childs = nodes.get({
              filter: function (item) {
                  return currChildrensId.includes(item.id);
              }
          });
          for(const child of childs) {
            if(!child.hidden) childrens.push(child);
            if(!child.areChildsHiden) {
              otherUpdates.push({ id: child.id, areChildsHiden: true });
              childrensId.push(child.childrensId);
            }
          }
        }
      }

      const updates = childrens.map(node => ({id: node.id, hidden }));
      nodes.update([...updates, { id: node.id, areChildsHiden: hidden }, ...otherUpdates]);
    }
  </script>
</html>
